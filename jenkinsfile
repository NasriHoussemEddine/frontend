pipeline {
    agent any
    tools {
        nodejs "nodejs"
    }

    environment {
        DOCKER_HUB_TOKEN = credentials('docker-hub-key')
        DOCKER_IMAGE_NAME = "houssemnasri/houssemnasri-4carctic-g1-frontend"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/NasriHoussemEddine/frontend.git'
            }
        }

        stage('Verify Node and NPM Versions') {
            steps {
                sh 'node -v'
                sh 'npm -v'
            }
        }

        stage('Get Commit Message and Set Version') {
            steps {
                script {
                    // Get the latest commit message
                    def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                    // Try to extract a version pattern from the commit message (e.g., v1.2.3)
                    def versionMatch = commitMessage =~ /v\d+\.\d+\.\d+/
                    if (versionMatch) {
                        env.VERSION = versionMatch[0]  // Set the version to the matched version
                    } else {
                        // If no version is found in the commit message, default to "1.0"
                        error("No valid version found in commit message")
                    }

                    echo "New version will be: ${env.VERSION}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm cache clean --force'
                sh 'npm install --legacy-peer-deps'
            }
        }

        stage('Build Angular App') {
            steps {
                sh 'npm run build --prod'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${env.VERSION} ."
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    try {
                        sh "echo $DOCKER_HUB_TOKEN | docker login -u houssemnasri --password-stdin"
                        sh "docker push ${DOCKER_IMAGE_NAME}:${env.VERSION}"
                    } finally {
                        sh 'docker logout'
                    }
                }
            }
        }

        stage('Deploy front App') {
            steps {
                echo "Deploying Frontend Application..."
                sh 'minikube kubectl -- apply -f angular.yaml'
            }
        }

    }

    post {
        always {
            cleanWs()
        }
    }
}
